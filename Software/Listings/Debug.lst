C51 COMPILER V9.60.0.0   DEBUG                                                             02/16/2022 11:15:16 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DEBUG
OBJECT MODULE PLACED IN .\Objects\Debug.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE Code\Debug.C OPTIMIZE(8,SPEED) BROWSE INCDIR(.\ADC;.\DATAFLASH;.\Public;
                    -.\RGB;.\SPI;.\TIMER;.\TOUCHKEY;.\UART;.\USB\USB_LIB;.\USB\Host) DEFINE(DEBUG) DEBUG OBJECTEXTEND PRINT(.\Listings\Debug.
                    -lst) TABS(3) OBJECT(.\Objects\Debug.obj)

line level    source

   1          /********************************** (C) COPYRIGHT *******************************
   2          * File Name          : Debug.C
   3          * Author             : WCH
   4          * Version            : V1.4
   5          * Date               : 2021/12/15
   6          * Description        : This file contains all the functions prototypes for UART
   7          *                      Printf , Delay functions.
   8          *******************************************************************************/
   9          #include "Debug.H"
  10          
  11          /*******************************************************************************
  12          * Function Name  : CfgFsys
  13          * Description    : CH557时钟选择和配置函数,复位默认使用内部晶振，Fsys=12MHz，
  14          *                   FREQ_SYS可以通过CLOCK_CFG配置得到，公式如下：
  15          *                   Fsys = (Fosc * 4/(CLOCK_CFG & MASK_SYS_CK_SEL);具体时钟需要自己配置
  16          * Input          : None
  17          * Return         : None
  18          *******************************************************************************/
  19          void CfgFsys(void)
  20          {
  21   1      #if OSC_EN_XT
                  P7 = P7 & 0xF0 | 0x06;                     //启动外部晶振前,P7.0处于低电平,P7.1处于上拉状态
                  SAFE_MOD = 0x55;
                  SAFE_MOD = 0xAA;
                  CLOCK_CFG |= bOSC_EN_XT;                          //使能外部晶振
                  mDelaymS(10);
                  SAFE_MOD = 0x55;
                  SAFE_MOD = 0xAA;
                  CLOCK_CFG &= ~bOSC_EN_INT;                        //关闭内部晶振
                  SAFE_MOD = 0x00;
              #endif
  32   1      
  33   1          SAFE_MOD = 0x55;
  34   1          SAFE_MOD = 0xAA;
  35   1      #if FREQ_SYS == 48000000
  36   1          CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x07;  // 48MHz
  37   1      
  38   1      #endif
  39   1      
  40   1      #if FREQ_SYS == 32000000
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x06;  // 32MHz
              
              #endif
  44   1      
  45   1      #if FREQ_SYS == 24000000
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x05;  // 24MHz
              
              #endif
  49   1      
  50   1      #if FREQ_SYS == 16000000
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x04;  // 16MHz
              
              #endif
C51 COMPILER V9.60.0.0   DEBUG                                                             02/16/2022 11:15:16 PAGE 2   

  54   1      
  55   1      #if FREQ_SYS == 12000000
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x03;  // 12MHz
              
              #endif
  59   1      
  60   1      #if FREQ_SYS == 3000000
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x02;  // 3MHz
              
              #endif
  64   1      
  65   1      #if FREQ_SYS == 750000
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x01;  // 750KHz
              
              #endif
  69   1      
  70   1      #if FREQ_SYS == 187500
                  CLOCK_CFG = CLOCK_CFG & ~ MASK_SYS_CK_SEL | 0x00;  // 187.5KHz
              
              #endif
  74   1      
  75   1          SAFE_MOD = 0x00;
  76   1      }
  77          
  78          /*******************************************************************************
  79          * Function Name  : mDelayus
  80          * Description    : us延时函数，以uS为单位延时
  81          * Input          : n
  82          * Return         : None
  83          *******************************************************************************/
  84          void mDelayuS(UINT16 n)
  85          {
  86   1      #ifdef   FREQ_SYS
  87   1      #if      FREQ_SYS <= 6000000
                  n >>= 2;
              #endif
  90   1      #if      FREQ_SYS <= 3000000
                  n >>= 2;
              #endif
  93   1      #if      FREQ_SYS <= 750000
                  n >>= 4;
              #endif
  96   1      #endif
  97   1          while(n)   // total = 12~13 Fsys cycles, 1uS @Fsys=12MHz
  98   1          {
  99   2              ++ SAFE_MOD;  // 2 Fsys cycles, for higher Fsys, add operation here
 100   2      #ifdef   FREQ_SYS
 101   2      #if      FREQ_SYS >= 14000000
 102   2              ++ SAFE_MOD;
 103   2      #endif
 104   2      #if      FREQ_SYS >= 16000000
 105   2              ++ SAFE_MOD;
 106   2      #endif
 107   2      #if      FREQ_SYS >= 18000000
 108   2              ++ SAFE_MOD;
 109   2      #endif
 110   2      #if      FREQ_SYS >= 20000000
 111   2              ++ SAFE_MOD;
 112   2      #endif
 113   2      #if      FREQ_SYS >= 22000000
 114   2              ++ SAFE_MOD;
 115   2      #endif
C51 COMPILER V9.60.0.0   DEBUG                                                             02/16/2022 11:15:16 PAGE 3   

 116   2      #if      FREQ_SYS >= 24000000
 117   2              ++ SAFE_MOD;
 118   2      #endif
 119   2      #endif
 120   2              -- n;
 121   2          }
 122   1      }
 123          
 124          /*******************************************************************************
 125          * Function Name  : mDelayms
 126          * Description    : ms延时函数，以mS为单位延时
 127          * Input          : n
 128          * Return         : None
 129          *******************************************************************************/
 130          void mDelaymS(UINT16 n)
 131          {
 132   1          while(n)
 133   1          {
 134   2              mDelayuS(1000);
 135   2              -- n;
 136   2          }
 137   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     67    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
